JavaScript Promises:

    A promise takes two parameters: resolve (for success) and reject (for failure).

    resolve and reject are used within the promise to signal success or failure.

    The .then() method is used to handle the successful outcome of the promise.
    
    The .catch() method is used to handle errors or rejections.


task 2:
---------

    In this task, your instructor is aiming to teach you several important concepts related to handling JavaScript Promises:

    Handling Promise Resolution and Rejection:
        .then(): This method is used to handle the resolved value of the Promise. You should understand how to handle a successful outcome by processing or transforming the resolved value.
        .catch(): This method handles any errors or rejections from the Promise. It’s important to know how to deal with failure cases by catching and handling errors.

    Using .finally():
        .finally(): This method is used to execute code after the Promise has been settled (either resolved or rejected). It’s useful for cleanup tasks or actions that should occur regardless of the outcome. Understanding .finally() helps you manage scenarios where certain actions, like logging or resource cleanup, need to happen no matter what.

    Separation of Concerns:
        By separating the handling of success and error cases and the logging/cleanup logic, you learn to write cleaner and more maintainable code. This separation ensures that each part of your code does only what it is responsible for.

    Promise Chaining:
        This task also demonstrates how you can chain .then(), .catch(), and .finally() methods to handle different aspects of a Promise’s lifecycle. It’s a foundational concept in asynchronous programming.

Understanding these concepts will help you write more effective and readable asynchronous code and handle various outcomes of asynchronous operations gracefully.


task3: dealing with multiple promises
--------------------------------------

When dealing with Promise.all(), all items in the array should be promises. If some items are not promises, they are treated as already-resolved promises (i.e., they are wrapped in a resolved promise).

Here’s how you can handle cases where not all items are promises:

    Wrap Non-Promises in Promises:

    If you have a mix of promises and non-promises, you can wrap the non-promises in Promise.resolve() to ensure they are treated as resolved promises. This way, Promise.all() will handle them uniformly.

    Example:

    javascript

const promise1 = Promise.resolve('Resolved Promise 1');
const nonPromise = 'Non-Promise Value';
const promise2 = Promise.resolve('Resolved Promise 2');

const promises = [promise1, Promise.resolve(nonPromise), promise2];

Promise.all(promises)
  .then(([result1, result2, result3]) => {
    console.log(result1); // 'Resolved Promise 1'
    console.log(result2); // 'Non-Promise Value'
    console.log(result3); // 'Resolved Promise 2'
  })
  .catch(err => {
    console.log('An error occurred:', err);
  });

Check if Each Item is a Promise:

If you want to conditionally handle items based on whether they are promises or not, you can manually check each item and wrap it in Promise.resolve() if it's not already a promise.

Example:

javascript

    function wrapInPromise(value) {
      return value instanceof Promise ? value : Promise.resolve(value);
    }

    const item1 = Promise.resolve('Promise Item');
    const item2 = 'Non-Promise Item';
    const item3 = Promise.resolve('Another Promise Item');

    const items = [item1, item2, item3].map(wrapInPromise);

    Promise.all(items)
      .then(([result1, result2, result3]) => {
        console.log(result1); // 'Promise Item'
        console.log(result2); // 'Non-Promise Item'
        console.log(result3); // 'Another Promise Item'
      })
      .catch(err => {
        console.log('An error occurred:', err);
      });

By wrapping non-promise values in Promise.resolve(), you can ensure that all items in the array are treated uniformly by Promise.all(). This makes it easier to work with mixed types of results in asynchronous operations.


Exactly! How you handle the result depends on the data type and structure of the resolved value. Here's a quick overview of how you might handle different types of data:

    Primitive Values (String, Number, Boolean):
        If the resolved value is a primitive type, you access it directly.

    javascript

const promise = Promise.resolve('Lagos');

promise.then(value => {
  console.log(value); // 'Lagos'
});

Objects (Dictionaries):

    If the resolved value is an object, you access its properties using dot notation or bracket notation.

javascript

const promise = Promise.resolve({ city: 'Lagos', population: 1000000 });

promise.then(value => {
  console.log(value.city); // 'Lagos'
  console.log(value['population']); // 1000000
});

Arrays:

    If the resolved value is an array, you can access elements by index.

javascript

const promise = Promise.resolve(['Lagos', 'Abuja', 'Ibadan']);

promise.then(value => {
  console.log(value[0]); // 'Lagos'
  console.log(value[1]); // 'Abuja'
});

Nested Structures:

    For nested structures, you need to chain property access according to the structure.

javascript

const promise = Promise.resolve({
  location: {
    city: 'Lagos',
    country: 'Nigeria'
  },
  population: 1000000
});

promise.then(value => {
  console.log(value.location.city); // 'Lagos'
  console.log(value.location.country); // 'Nigeria'
});

Handling Mixed Types:

    When working with Promise.all() and mixed types, ensure that you correctly handle each type based on its structure.

javascript

    const promise1 = Promise.resolve('Lagos');
    const promise2 = Promise.resolve({ city: 'Abuja' });
    const promise3 = Promise.resolve([1, 2, 3]);

    Promise.all([promise1, promise2, promise3])
      .then(([city, cityObj, numbers]) => {
        console.log(city); // 'Lagos'
        console.log(cityObj.city); // 'Abuja'
        console.log(numbers[0]); // 1
      });

In general, always consider the type of data you're working with and access it accordingly.